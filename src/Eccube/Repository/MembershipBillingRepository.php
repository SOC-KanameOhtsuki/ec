<?php

namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MembershipBillingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipBillingRepository extends EntityRepository
{
    protected $app;

    public function setApplication($app)
    {
        $this->app = $app;
    }

    /**
     *
     * @param  array        $searchData
     * @return QueryBuilder
     */
    public function getQueryBuilderBySearchDataForAdmin($searchData)
    {
        $qb = $this->createQueryBuilder('mb')
//            ->select('mb.id', 'mbs.name AS status', "pm.membership_year", 'mb.create_date', 'mb.update_date', 'COUNT(mbd.id) AS target_count')
            ->leftJoin('mb.TargetYear', 'mbty')
            ->leftJoin('mbty.ProductMembership', 'pm')
            ->leftJoin('mb.TargetStatus', 'mbts')
            ->leftJoin('mb.Status', 'mbs')
            ->leftJoin('mb.MembershipBillingDetail', 'mbd');

        // multi
        if (isset( $searchData['multi']) && Str::isNotBlank($searchData['multi'])) {
            $multi = preg_match('/^\d+$/', $searchData['multi']) ? $searchData['multi'] : null;
            $qb
                ->andWhere('mb.id = :multi OR mbty.ProductMembership = :multi')
                ->setParameter('multi', $multi);
        }

        // membership_year
//        if (!empty($searchData['membership_year']) && $searchData['membership_year']) {
//            $qb->andWhere($qb->expr()->in('mbty.ProductMembership', ':product_memberships'))
//                    ->setParameter('product_memberships', $searchData['membership_year']);
//        }

        // status
        if (!empty($searchData['status']) && $searchData['status']) {
            $qb
                ->andWhere('mb.Status = :status')
                ->setParameter('status', $searchData['status']);
            $filterStatus = true;
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('mb.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date = $date
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('mb.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('o.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }
        if (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = clone $searchData['update_date_end'];
            $date = $date
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('o.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // Group By
        $qb->groupBy('mb.id');

        // Order By
        $qb->orderBy('mb.update_date', 'DESC');
        $qb->addorderBy('mb.id', 'DESC');

        return $qb;
    }

    public function getProcessing()
    {
        $qb = $this->createQueryBuilder('mb')
            ->andWhere('mb.Status <> 3');

        $processing = $qb->getQuery()
            ->getResult();
        return $processing;
    }
}
