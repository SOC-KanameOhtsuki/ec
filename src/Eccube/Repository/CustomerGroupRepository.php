<?php

namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Util\Str;

/**
 * CustomerGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerGroupRepository extends EntityRepository
{

    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('cg')
            ->select('cg')
            ->andWhere('cg.del_flg = 0');

        if (isset($searchData['multi']) && Str::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $id = preg_match('/^\d+$/', $clean_key_multi) ? $clean_key_multi : null;
            $qb
                ->andWhere('cg.id = :customer_group_id OR cg.name LIKE :name OR cg.kana LIKE :kana OR cg.bill_to LIKE :bill_to')
                ->setParameter('customer_group_id', $id)
                ->setParameter('name', '%' . $clean_key_multi . '%')
                ->setParameter('kana', '%' . $clean_key_multi . '%')
                ->setParameter('bill_to', '%' . $clean_key_multi . '%');
        }

        // SendToPref
        if (!empty($searchData['send_to_pref']) && $searchData['send_to_pref']) {
            $qb
                ->andWhere('cg.SendToPref = :send_to_pref')
                ->setParameter('send_to_pref', $searchData['send_to_pref']->getId());
        }

        // send_to_tel
        if (isset($searchData['send_to_tel']) && Str::isNotBlank($searchData['send_to_tel'])) {
            $qb
                ->andWhere('CONCAT(cg.send_to_tel01, cg.send_to_tel02, cg.send_to_tel03) LIKE :send_to_tel')
                ->setParameter('send_to_tel', '%' . $searchData['send_to_tel'] . '%');
        }

        // bill_to
        if (isset($searchData['bill_to']) && Str::isNotBlank($searchData['bill_to'])) {
            $qb
                ->andWhere('cg.bill_to LIKE :bill_to')
                ->setParameter('bill_to', '%' . $searchData['bill_to'] . '%');
        }

        // BillToPref
        if (!empty($searchData['bill_to_pref']) && $searchData['bill_to_pref']) {
            $qb
                ->andWhere('cg.BillToPref = :bill_to_pref')
                ->setParameter('bill_to_pref', $searchData['bill_to_pref']->getId());
        }

        // bill_to_tel
        if (isset($searchData['bill_to_tel']) && Str::isNotBlank($searchData['bill_to_tel'])) {
            $qb
                ->andWhere('CONCAT(cg.bill_to_tel01, cg.bill_to_tel02, cg.bill_to_tel03) LIKE :bill_to_tel')
                ->setParameter('bill_to_tel', '%' . $searchData['bill_to_tel'] . '%');
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('cg.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('cg.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('cg.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }
        if (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = clone $searchData['update_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('cg.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // Order By
        $qb->addOrderBy('cg.update_date', 'DESC');

        return $qb;
    }
}
