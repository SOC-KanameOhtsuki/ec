<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Common\Constant;
use Eccube\Entity\Customer;
use Eccube\Entity\Master\CustomerStatus;
use Eccube\Util\Str;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Util\SecureRandom;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends EntityRepository implements UserProviderInterface
{
    protected $app;

    public function setApplication($app)
    {
        $this->app = $app;
    }

    public function newCustomer()
    {
        $Customer = new \Eccube\Entity\Customer();
        $Status = $this->getEntityManager()
            ->getRepository('Eccube\Entity\Master\CustomerStatus')
            ->find(1);

        $Customer
            ->setStatus($Status)
            ->setDelFlg(0);

        return $Customer;
    }

    /**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @param string $username The username
     *
     * @return UserInterface
     *
     * @see UsernameNotFoundException
     *
     * @throws UsernameNotFoundException if the user is not found
     */
    public function loadUserByUsername($username)
    {
        // 本会員ステータスの会員のみ有効.
        $CustomerStatus = $this
            ->getEntityManager()
            ->getRepository('Eccube\Entity\Master\CustomerStatus')
            ->find(CustomerStatus::ACTIVE);

        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->where('bc.customer_number = :customer_number')
            ->andWhere('c.del_flg = :delFlg')
            ->andWhere('c.Status =:CustomerStatus')
            ->setParameters(array(
                'customer_number' => $username,
                'delFlg' => Constant::DISABLED,
                'CustomerStatus' => $CustomerStatus,
            ))
            ->setMaxResults(1)
            ->getQuery();
        $Customer = $query->getOneOrNullResult();
        if (!$Customer) {
            throw new UsernameNotFoundException(sprintf('Username "%s" does not exist.', $username));
        }
        $app = \Eccube\Application::getInstance();
        $encoder = $app['security.encoder_factory']->getEncoder($Customer);
        if (empty($Customer->getSalt())) {
            $Customer->setPassword(sha1($Customer->getCustomerBasicInfo()->getCustomerPinCode() . ':' . $app['config']['auth_magic']));
        } else {
            $Customer->setPassword($encoder->encodePassword($Customer->getCustomerBasicInfo()->getCustomerPinCode(), $Customer->getSalt()));
        }

        return $Customer;
    }

    /**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     *
     * @param UserInterface $user
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the account is not supported
     */
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof Customer) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }
        if (is_null($user->getCustomerBasicInfo())) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not have CustomerBasicInfo.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getCustomerBasicInfo()->getCustomerNumber());
    }

    /**
     * Whether this provider supports the given user class.
     *
     * @param string $class
     *
     * @return bool
     */
    public function supportsClass($class)
    {
        return $class === 'Eccube\Entity\Customer';
    }

    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->leftJoin('c.CustomerGroup', 'cg')
            ->andWhere('c.del_flg = 0');

        if (isset($searchData['multi']) && Str::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $id = preg_match('/^\d+$/', $clean_key_multi) ? $clean_key_multi : null;
            $qb
                ->andWhere('c.id = :customer_id OR bc.customer_number LIKE :customer_number OR bc.customer_number_old LIKE :customer_number_old OR CONCAT(c.name01, c.name02) LIKE :name OR CONCAT(c.kana01, c.kana02) LIKE :kana OR c.email LIKE :email')
                ->setParameter('customer_id', $id)
                ->setParameter('customer_number', '%' . $clean_key_multi . '%')
                ->setParameter('customer_number_old', '%' . $clean_key_multi . '%')
                ->setParameter('name', '%' . $clean_key_multi . '%')
                ->setParameter('kana', '%' . $clean_key_multi . '%')
                ->setParameter('email', '%' . $clean_key_multi . '%');
        }

        // CusotmerId
        if (!empty($searchData['customer_id']) && $searchData['customer_id']) {
            $qb
                ->andWhere('c.id = :customer_id')
                ->setParameter('customer_id', $searchData['customer_id']);
        }

        // PrefArea
        if (!empty($searchData['pref_area']) && count($searchData['pref_area']) > 0) {
            $prefs = array();
            foreach ($searchData['pref_area'] as $prefArea) {
                switch($prefArea) {
                case 1:     // 北海道
                    $prefs[] = 1;
                    break;
                case 2:     // 東北
                    $prefs[] = 2;
                    $prefs[] = 3;
                    $prefs[] = 4;
                    $prefs[] = 5;
                    $prefs[] = 6;
                    $prefs[] = 7;
                    break;
                case 3:     // 関東
                    $prefs[] = 8;
                    $prefs[] = 9;
                    $prefs[] = 10;
                    $prefs[] = 11;
                    $prefs[] = 12;
                    $prefs[] = 13;
                    $prefs[] = 14;
                    break;
                case 4:     // 北陸
                    $prefs[] = 15;
                    $prefs[] = 16;
                    $prefs[] = 17;
                    $prefs[] = 18;
                    $prefs[] = 19;
                    $prefs[] = 20;
                    break;
                case 5:     // 関西
                    $prefs[] = 25;
                    $prefs[] = 26;
                    $prefs[] = 27;
                    $prefs[] = 28;
                    $prefs[] = 29;
                    $prefs[] = 30;
                    break;
                case 6:     // 東海
                    $prefs[] = 21;
                    $prefs[] = 22;
                    $prefs[] = 23;
                    $prefs[] = 24;
                    break;
                case 7:     // 中国
                    $prefs[] = 31;
                    $prefs[] = 32;
                    $prefs[] = 33;
                    $prefs[] = 34;
                    $prefs[] = 35;
                    break;
                case 8:     // 四国
                    $prefs[] = 36;
                    $prefs[] = 37;
                    $prefs[] = 38;
                    $prefs[] = 39;
                    break;
                case 9:     // 九州
                    $prefs[] = 40;
                    $prefs[] = 41;
                    $prefs[] = 42;
                    $prefs[] = 43;
                    $prefs[] = 44;
                    $prefs[] = 45;
                    $prefs[] = 46;
                    break;
                case 10:    // 沖縄
                    $prefs[] = 47;
                    break;
                }
            }
            $qb
                ->andWhere($qb->expr()->in('c.Pref', ':prefs'))
                ->setParameter('prefs', $prefs);
        }

        // Pref
        if (!empty($searchData['pref']) && $searchData['pref']) {
            $qb
                ->andWhere('c.Pref = :pref')
                ->setParameter('pref', $searchData['pref']->getId());
        }

        // Address
        if (isset($searchData['address']) && Str::isNotBlank($searchData['address'])) {
            $qb
                ->andWhere('c.addr01 LIKE :address')
                ->setParameter('address', '%' . $searchData['address'] . '%');
        }

        // sex
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $sexs = array();
            foreach ($searchData['sex'] as $sex) {
                $sexs[] = $sex->getId();
            }

            $qb
                ->andWhere($qb->expr()->in('c.Sex', ':sexs'))
                ->setParameter('sexs', $sexs);
        }

        if (!empty($searchData['birth_month']) && $searchData['birth_month']) {
            $qb
                ->andWhere('EXTRACT(MONTH FROM c.birth) = :birth_month')
                ->setParameter('birth_month', $searchData['birth_month']);
        }

        // birth
        if (!empty($searchData['birth_start']) && $searchData['birth_start']) {
            $date = $searchData['birth_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth >= :birth_start')
                ->setParameter('birth_start', $date);
        }
        if (!empty($searchData['birth_end']) && $searchData['birth_end']) {
            $date = clone $searchData['birth_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth < :birth_end')
                ->setParameter('birth_end', $date);
        }

        // tel
        if (isset($searchData['tel']) && Str::isNotBlank($searchData['tel'])) {
            $qb
                ->andWhere('CONCAT(c.tel01, c.tel02, c.tel03) LIKE :tel')
                ->setParameter('tel', '%' . $searchData['tel'] . '%');
        }

        // buy_total
        if (isset($searchData['buy_total_start']) && Str::isNotBlank($searchData['buy_total_start'])) {
            $qb
                ->andWhere('c.buy_total >= :buy_total_start')
                ->setParameter('buy_total_start', $searchData['buy_total_start']);
        }
        if (isset($searchData['buy_total_end']) && Str::isNotBlank($searchData['buy_total_end'])) {
            $qb
                ->andWhere('c.buy_total <= :buy_total_end')
                ->setParameter('buy_total_end', $searchData['buy_total_end']);
        }

        // buy_times
        if (!empty($searchData['buy_times_start']) && $searchData['buy_times_start']) {
            $qb
                ->andWhere('c.buy_times >= :buy_times_start')
                ->setParameter('buy_times_start', $searchData['buy_times_start']);
        }
        if (!empty($searchData['buy_times_end']) && $searchData['buy_times_end']) {
            $qb
                ->andWhere('c.buy_times <= :buy_times_end')
                ->setParameter('buy_times_end', $searchData['buy_times_end']);
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }
        if (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = clone $searchData['update_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // last_buy
        if (!empty($searchData['last_buy_start']) && $searchData['last_buy_start']) {
            $date = $searchData['last_buy_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date >= :last_buy_start')
                ->setParameter('last_buy_start', $date);
        }
        if (!empty($searchData['last_buy_end']) && $searchData['last_buy_end']) {
            $date = clone $searchData['last_buy_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date < :last_buy_end')
                ->setParameter('last_buy_end', $date);
        }

        // status
        if (!empty($searchData['customer_status']) && count($searchData['customer_status']) > 0) {
            $qb
                ->andWhere($qb->expr()->in('c.Status', ':statuses'))
                ->setParameter('statuses', $searchData['customer_status']);
        }

        // CustomerGroup
        if (!empty($searchData['customer_group']) && $searchData['customer_group']) {
            $qb
                ->andWhere('cg.kana LIKE :customer_group')
                ->setParameter('customer_group', '%' . $searchData['customer_group'] . '%');
        }

        // CustomerNumber
        if (!empty($searchData['customer_number']) && $searchData['customer_number']) {
            $qb
                ->andWhere('bc.customer_number LIKE :customer_number')
                ->setParameter('customer_number', '%' . $searchData['customer_number'] . '%');
        }

        // CustomerNumberOld
        if (!empty($searchData['customer_number_old']) && $searchData['customer_number_old']) {
            $qb
                ->andWhere('bc.customer_number_old LIKE :customer_number_old')
                ->setParameter('customer_number_old', '%' . $searchData['customer_number_old'] . '%');
        }

        // BasicInfoStatus
        if (!empty($searchData['customer_basicinfo_status']) && count($searchData['customer_basicinfo_status']) > 0) {
            $qb
                ->andWhere($qb->expr()->in('bc.Status', ':statuses'))
                ->setParameter('statuses', $searchData['customer_basicinfo_status']);
        }

        // Bureau
        if (!empty($searchData['customer_basicinfo_bureau']) && $searchData['customer_basicinfo_bureau']) {
            $qb
                ->andWhere('bc.Bureau = :bureau')
                ->setParameter('bureau', $searchData['customer_basicinfo_bureau']->getId());
        }

        // SupporterType
        if (!empty($searchData['customer_basicinfo_supporter_type']) && $searchData['customer_basicinfo_supporter_type']) {
            $qb
                ->andWhere('bc.SupporterType = :supporterType')
                ->setParameter('supporterType', $searchData['customer_basicinfo_supporter_type']->getId());
        }

        // InstructorType
        if (!empty($searchData['customer_basicinfo_instructor_type']) && $searchData['customer_basicinfo_instructor_type']) {
            $qb
                ->andWhere('bc.InstructorType = :instructorType')
                ->setParameter('instructorType', $searchData['customer_basicinfo_instructor_type']->getId());
        }

        // buy_product_name、buy_product_code
        if (isset($searchData['buy_product_code']) && Str::isNotBlank($searchData['buy_product_code'])) {
            $qb
                ->leftJoin('c.Orders', 'o')
                ->leftJoin('o.OrderDetails', 'od')
                ->andWhere('od.product_name LIKE :buy_product_name OR od.product_code LIKE :buy_product_name')
                ->setParameter('buy_product_name', '%' . $searchData['buy_product_code'] . '%');
        }

        // membership_pay
        if (!empty($searchData['membership_pay']) && count($searchData['membership_pay']) > 0) {
            $query = '';
            $existsParam = false;
            foreach ($searchData['membership_pay'] as $membership_pay) {
                switch($membership_pay) {
                case 1:     // 納入済
                    $existsParam = true;
                    $query .= ((0 < strlen($query))?"OR ":"") . '(me.id = 1 AND bc.last_pay_membership_year >= :now_year)';
                    break;
                case 2:     // 未納
                    $existsParam = true;
                    $query .= ((0 < strlen($query))?"OR ":"") . '(me.id = 1 AND (bc.last_pay_membership_year IS NULL OR bc.last_pay_membership_year < :now_year))';
                    break;
                case 3:     // 未納
                    $query .= ((0 < strlen($query))?"OR ":"") . '(me.id = 2)';
                    break;
                case 4:     // 未納
                    $query .= ((0 < strlen($query))?"OR ":"") . '(me.id = 3)';
                    break;
                }
            }
            $qb->leftJoin('bc.MembershipExemption', 'me')
                ->andWhere($query);
            if ($existsParam) {
                $qb->setParameter('now_year', date('Y'));
            }
        }

        // Order By
        $qb->addOrderBy('c.update_date', 'DESC');

        return $qb;
    }

    public function getQueryBuilderBySearchDatas($searchDatas)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->leftJoin('c.CustomerGroup', 'cg')
            ->andWhere('c.del_flg = 0');

        $subQueryIndex = 1;
        $params = array();
        foreach($searchDatas as $searchData) {
            $alias = 'c'.$subQueryIndex;
            $subQuery = $this->createQueryBuilder($alias)
                ->select($alias.'.id')
                ->leftJoin($alias.'.CustomerBasicInfo', 'bc' . $subQueryIndex)
                ->andWhere($alias.'.del_flg = 0');
            if (isset($searchData['searchData']['multi']) && Str::isNotBlank($searchData['searchData']['multi'])) {
                //スペース除去
                $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['searchData']['multi']);
                $id = preg_match('/^\d+$/', $clean_key_multi) ? $clean_key_multi : null;
                $subQuery
                    ->andWhere($alias.'.id = :customer_id' . $subQueryIndex . ' OR ' . 'bc' . $subQueryIndex . '.customer_number LIKE :customer_number' . $subQueryIndex . ' OR ' . 'bc' . $subQueryIndex . '.customer_number_old LIKE :customer_number_old' . $subQueryIndex . ' OR CONCAT(' . $alias . '.name01, ' . $alias . '.name02) LIKE :name' . $subQueryIndex . ' OR CONCAT(' . $alias . '.kana01, ' . $alias . '.kana02) LIKE :kana' . $subQueryIndex . ' OR ' . $alias . '.email LIKE :email' . $subQueryIndex);
                $params['customer_id' . $subQueryIndex] = $id;
                $params['customer_number' . $subQueryIndex] = '%' . $clean_key_multi . '%';
                $params['customer_number_old' . $subQueryIndex] = '%' . $clean_key_multi . '%';
                $params['name' . $subQueryIndex] = '%' . $clean_key_multi . '%';
                $params['kana' . $subQueryIndex] = '%' . $clean_key_multi . '%';
                $params['email' . $subQueryIndex] = '%' . $clean_key_multi . '%';
            }

            // CusotmerId
            if (!empty($searchData['searchData']['customer_id']) && $searchData['searchData']['customer_id']) {
                $subQuery
                    ->andWhere($alias.'.customer_id = :customer_id_full' . $subQueryIndex);
                $params['customer_id_full' . $subQueryIndex] = $searchData['searchData']['customer_id'];
            }

            // PrefArea
            if (!empty($searchData['searchData']['pref_area']) && count($searchData['searchData']['pref_area']) > 0) {
                $prefs = array();
                foreach ($searchData['searchData']['pref_area'] as $prefArea) {
                    switch($prefArea) {
                    case 1:     // 北海道
                        $prefs[] = 1;
                        break;
                    case 2:     // 東北
                        $prefs[] = 2;
                        $prefs[] = 3;
                        $prefs[] = 4;
                        $prefs[] = 5;
                        $prefs[] = 6;
                        $prefs[] = 7;
                        break;
                    case 3:     // 関東
                        $prefs[] = 8;
                        $prefs[] = 9;
                        $prefs[] = 10;
                        $prefs[] = 11;
                        $prefs[] = 12;
                        $prefs[] = 13;
                        $prefs[] = 14;
                        break;
                    case 4:     // 北陸
                        $prefs[] = 15;
                        $prefs[] = 16;
                        $prefs[] = 17;
                        $prefs[] = 18;
                        $prefs[] = 19;
                        $prefs[] = 20;
                        break;
                    case 5:     // 関西
                        $prefs[] = 25;
                        $prefs[] = 26;
                        $prefs[] = 27;
                        $prefs[] = 28;
                        $prefs[] = 29;
                        $prefs[] = 30;
                        break;
                    case 6:     // 東海
                        $prefs[] = 21;
                        $prefs[] = 22;
                        $prefs[] = 23;
                        $prefs[] = 24;
                        break;
                    case 7:     // 中国
                        $prefs[] = 31;
                        $prefs[] = 32;
                        $prefs[] = 33;
                        $prefs[] = 34;
                        $prefs[] = 35;
                        break;
                    case 8:     // 四国
                        $prefs[] = 36;
                        $prefs[] = 37;
                        $prefs[] = 38;
                        $prefs[] = 39;
                        break;
                    case 9:     // 九州
                        $prefs[] = 40;
                        $prefs[] = 41;
                        $prefs[] = 42;
                        $prefs[] = 43;
                        $prefs[] = 44;
                        $prefs[] = 45;
                        $prefs[] = 46;
                        break;
                    case 10:    // 沖縄
                        $prefs[] = 47;
                        break;
                    }
                }
                $subQuery
                    ->andWhere($qb->expr()->in('c.Pref', ':prefs' . $subQueryIndex));
                $params['prefs' . $subQueryIndex] = $prefs;
            }

            // Pref
            if (!empty($searchData['searchData']['pref']) && $searchData['searchData']['pref']) {
                $subQuery
                    ->andWhere($alias.'.Pref = :pref' . $subQueryIndex);
                $params['pref' . $subQueryIndex] = $searchData['searchData']['pref']->getId();
            }

            // Address
            if (isset($searchData['searchData']['address']) && Str::isNotBlank($searchData['searchData']['address'])) {
                $subQuery
                    ->andWhere($alias.'.addr01 LIKE :address' . $subQueryIndex);
                $params['address' . $subQueryIndex] = '%' . $searchData['searchData']['address'] . '%';
            }

            // sex
            if (!empty($searchData['searchData']['sex']) && count($searchData['searchData']['sex']) > 0) {
                $sexs = array();
                foreach ($searchData['searchData']['sex'] as $sex) {
                    $sexs[] = $sex->getId();
                }
                $subQuery
                    ->andWhere($subQuery->expr()->in($alias.'.Sex', ':sexs' . $subQueryIndex));
                $params['sexs' . $subQueryIndex] = $sexs;
            }

            if (!empty($searchData['searchData']['birth_month']) && $searchData['searchData']['birth_month']) {
                $subQuery
                    ->andWhere('EXTRACT(MONTH FROM c.birth) = :birth_month' . $subQueryIndex);
                $params['birth_month' . $subQueryIndex] = $searchData['searchData']['birth_month'];
            }

            // birth
            if (!empty($searchData['searchData']['birth_start']) && $searchData['searchData']['birth_start']) {
                $date = $searchData['searchData']['birth_start']
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.birth >= :birth_start' . $subQueryIndex);
                $params['birth_start' . $subQueryIndex] = $date;
            }
            if (!empty($searchData['searchData']['birth_end']) && $searchData['searchData']['birth_end']) {
                $date = clone $searchData['searchData']['birth_end'];
                $date = $date
                    ->modify('+1 days')
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.birth < :birth_end' . $subQueryIndex);
                $params['birth_end' . $subQueryIndex] = $date;
            }

            // tel
            if (isset($searchData['searchData']['tel']) && Str::isNotBlank($searchData['searchData']['tel'])) {
                $subQuery
                    ->andWhere('CONCAT(c.tel01, c.tel02, c.tel03) LIKE :tel' . $subQueryIndex);
                $params['tel' . $subQueryIndex] = '%' . $searchData['searchData']['tel'] . '%';
            }

            // buy_total
            if (isset($searchData['searchData']['buy_total_start']) && Str::isNotBlank($searchData['searchData']['buy_total_start'])) {
                $subQuery
                    ->andWhere($alias.'.buy_total >= :buy_total_start' . $subQueryIndex);
                $params['buy_total_start' . $subQueryIndex] = $searchData['searchData']['buy_total_start'];
            }
            if (isset($searchData['searchData']['buy_total_end']) && Str::isNotBlank($searchData['searchData']['buy_total_end'])) {
                $subQuery
                    ->andWhere($alias.'.buy_total <= :buy_total_end' . $subQueryIndex);
                $params['buy_total_end' . $subQueryIndex] = $date;
            }

            // buy_times
            if (!empty($searchData['searchData']['buy_times_start']) && $searchData['searchData']['buy_times_start']) {
                $subQuery
                    ->andWhere($alias.'.buy_times >= :buy_times_start' . $subQueryIndex);
                $params['buy_times_start' . $subQueryIndex] = $searchData['searchData']['buy_times_start'];
            }
            if (!empty($searchData['searchData']['buy_times_end']) && $searchData['searchData']['buy_times_end']) {
                $subQuery
                    ->andWhere($alias.'.buy_times <= :buy_times_end' . $subQueryIndex);
                $params['buy_times_end' . $subQueryIndex] = $searchData['searchData']['buy_times_end'];
            }

            // create_date
            if (!empty($searchData['searchData']['create_date_start']) && $searchData['searchData']['create_date_start']) {
                $date = $searchData['searchData']['create_date_start']
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.create_date >= :create_date_start' . $subQueryIndex);
                $params['create_date_start' . $subQueryIndex] = $date;
            }
            if (!empty($searchData['searchData']['create_date_end']) && $searchData['searchData']['create_date_end']) {
                $date = clone $searchData['searchData']['create_date_end'];
                $date = $date
                    ->modify('+1 days')
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.create_date < :create_date_end' . $subQueryIndex);
                $params['create_date_end' . $subQueryIndex] = $date;
            }

            // update_date
            if (!empty($searchData['searchData']['update_date_start']) && $searchData['searchData']['update_date_start']) {
                $date = $searchData['searchData']['update_date_start']
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.update_date >= :update_date_start' . $subQueryIndex);
                $params['update_date_start' . $subQueryIndex] = $date;
            }
            if (!empty($searchData['searchData']['update_date_end']) && $searchData['searchData']['update_date_end']) {
                $date = clone $searchData['searchData']['update_date_end'];
                $date = $date
                    ->modify('+1 days')
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.update_date < :update_date_end' . $subQueryIndex);
                $params['update_date_end' . $subQueryIndex] = $date;
            }

            // last_buy
            if (!empty($searchData['searchData']['last_buy_start']) && $searchData['searchData']['last_buy_start']) {
                $date = $searchData['searchData']['last_buy_start']
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.last_buy_date >= :last_buy_start' . $subQueryIndex);
                $params['last_buy_start' . $subQueryIndex] = $date;
            }
            if (!empty($searchData['searchData']['last_buy_end']) && $searchData['searchData']['last_buy_end']) {
                $date = clone $searchData['searchData']['last_buy_end'];
                $date = $date
                    ->modify('+1 days')
                    ->format('Y-m-d H:i:s');
                $subQuery
                    ->andWhere($alias.'.last_buy_date < :last_buy_end' . $subQueryIndex);
                $params['last_buy_end' . $subQueryIndex] = $date;
            }

            // status
            if (!empty($searchData['searchData']['customer_status']) && count($searchData['searchData']['customer_status']) > 0) {
                $subQuery
                    ->andWhere($subQuery->expr()->in($alias.'.Status', ':statuses' . $subQueryIndex));
                $params['statuses' . $subQueryIndex] = $searchData['searchData']['customer_status'];
            }

            // CustomerGroup
            if (!empty($searchData['searchData']['customer_group']) && $searchData['searchData']['customer_group']) {
                $subQuery
                    ->andWhere('cg' . $subQueryIndex . '.kana LIKE :customer_group' . $subQueryIndex);
                $params['customer_group' . $subQueryIndex] = '%' . $searchData['searchData']['customer_group'] . '%';
            }

            // CustomerNumber
            if (!empty($searchData['searchData']['customer_number']) && $searchData['searchData']['customer_number']) {
                $subQuery
                    ->andWhere('bc' . $subQueryIndex . '.customer_number LIKE :customer_number' . $subQueryIndex);
                $params['customer_number' . $subQueryIndex] = '%' . $searchData['searchData']['customer_number'] . '%';
            }

            // CustomerNumberOld
            if (!empty($searchData['searchData']['customer_number_old']) && $searchData['searchData']['customer_number_old']) {
                $subQuery
                    ->andWhere('bc' . $subQueryIndex . '.customer_number_old LIKE :customer_number_old' . $subQueryIndex);
                $params['customer_number_old' . $subQueryIndex] = '%' . $searchData['searchData']['customer_number_old'] . '%';
            }

            // BasicInfoStatus
            if (!empty($searchData['searchData']['customer_basicinfo_status']) && count($searchData['searchData']['customer_basicinfo_status']) > 0) {
                $subQuery
                    ->andWhere($subQuery->expr()->in('bc' . $subQueryIndex . '.Status', ':statuses' . $subQueryIndex));
                $params['statuses' . $subQueryIndex] = $searchData['searchData']['customer_basicinfo_status'];
            }

            // Bureau
            if (!empty($searchData['searchData']['customer_basicinfo_bureau']) && $searchData['searchData']['customer_basicinfo_bureau']) {
                $subQuery
                    ->andWhere('bc' . $subQueryIndex . '.Bureau = :bureau');
                $params['bureau' . $subQueryIndex] = $searchData['searchData']['customer_basicinfo_bureau'];
            }

            // SupporterType
            if (!empty($searchData['searchData']['customer_basicinfo_supporter_type']) && $searchData['searchData']['customer_basicinfo_supporter_type']) {
                $subQuery
                    ->andWhere('bc' . $subQueryIndex . '.SupporterType = :supporterType');
                $params['supporterType' . $subQueryIndex] = $searchData['searchData']['customer_basicinfo_supporter_type'];
            }

            // InstructorType
            if (!empty($searchData['searchData']['customer_basicinfo_instructor_type']) && $searchData['searchData']['customer_basicinfo_instructor_type']) {
                $subQuery
                    ->andWhere('bc' . $subQueryIndex . '.InstructorType = :instructorType');
                $params['instructorType' . $subQueryIndex] = $searchData['searchData']['customer_basicinfo_instructor_type'];
            }

            // buy_product_name、buy_product_code
            if (isset($searchData['searchData']['buy_product_code']) && Str::isNotBlank($searchData['searchData']['buy_product_code'])) {
                $subQuery
                    ->leftJoin($alias.'.Orders', 'o' . $subQueryIndex)
                    ->leftJoin('o' . $subQueryIndex . '.OrderDetails', 'od' . $subQueryIndex)
                    ->andWhere('od' . $subQueryIndex . '.product_name LIKE :buy_product_name' . $subQueryIndex . ' OR ' . 'od' . $subQueryIndex . '.product_code LIKE :buy_product_name' . $subQueryIndex);
                $params['buy_product_name' . $subQueryIndex] = '%' . $searchData['searchData']['buy_product_code'] . '%';
            }
            // membership_pay
            if (!empty($searchData['searchData']['membership_pay']) && count($searchData['searchData']['membership_pay']) > 0) {
                $query = '';
                $existsParam = false;
                foreach ($searchData['searchData']['membership_pay'] as $membership_pay) {
                    switch($membership_pay) {
                    case 1:     // 納入済
                        $existsParam = true;
                        $query .= ((0 < strlen($query))?"OR ":"") . '(me' . $subQueryIndex . '.id = 1 AND bc' . $subQueryIndex . '.last_pay_membership_year >= :now_year' . $subQueryIndex . ')';
                        break;
                    case 2:     // 未納
                        $existsParam = true;
                        $query .= ((0 < strlen($query))?"OR ":"") . '(me' . $subQueryIndex . '.id = 1 AND bc' . $subQueryIndex . '.last_pay_membership_year < :now_year' . $subQueryIndex . ')';
                        break;
                    case 3:     // 未納
                        $query .= ((0 < strlen($query))?"OR ":"") . '(me' . $subQueryIndex . '.id = 2)';
                        break;
                    case 4:     // 未納
                        $query .= ((0 < strlen($query))?"OR ":"") . '(me' . $subQueryIndex . '.id = 3)';
                        break;
                    }
                }
                $subQuery->leftJoin('bc' . $subQueryIndex . '.MembershipExemption', 'me' . $subQueryIndex)
                    ->andWhere($query);
                if ($existsParam) {
                    $params['now_year' . $subQueryIndex] = date('Y');
                }
            }

            if ($searchData['join'] == 1) {
                $qb->orWhere("c.id IN ({$subQuery->getDQL()})");
            } else if ($searchData['join'] == 2) {
                $qb->andWhere("c.id NOT IN ({$subQuery->getDQL()})");
            } else {
                $qb->andWhere("c.id IN ({$subQuery->getDQL()})");
            }
            ++$subQueryIndex;
        }
        foreach($params as $key => $param) {
            $qb->setParameter($key, $param);
        }

        // Order By
        $qb->addOrderBy('c.update_date', 'DESC');

        return $qb;
    }

    public function getQueryBuilderBySearchRegularMemberData($searchData, $anonymousEnabled = false)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->andWhere('bc.Status = 1')
            ->andWhere('c.Status = 2')
            ->andWhere('c.del_flg = 0');
        if ($anonymousEnabled) {
            $qb->andWhere('bc.Anonymous = 1');
        }

        if (isset($searchData['multi']) && Str::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $id = preg_match('/^\d+$/', $clean_key_multi) ? $clean_key_multi : null;
            $qb
                ->andWhere('c.id = :customer_id OR CONCAT(c.name01, c.name02) LIKE :name OR CONCAT(c.kana01, c.kana02) LIKE :kana OR c.email LIKE :email')
                ->setParameter('customer_id', $id)
                ->setParameter('name', '%' . $clean_key_multi . '%')
                ->setParameter('kana', '%' . $clean_key_multi . '%')
                ->setParameter('email', '%' . $clean_key_multi . '%');
        }

        // Pref
        if (!empty($searchData['pref']) && $searchData['pref']) {
            $qb
                ->andWhere('c.Pref = :pref')
                ->setParameter('pref', $searchData['pref']->getId());
        }

        // sex
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $sexs = array();
            foreach ($searchData['sex'] as $sex) {
                $sexs[] = $sex->getId();
            }

            $qb
                ->andWhere($qb->expr()->in('c.Sex', ':sexs'))
                ->setParameter('sexs', $sexs);
        }

        if (!empty($searchData['birth_month']) && $searchData['birth_month']) {
            $qb
                ->andWhere('EXTRACT(MONTH FROM c.birth) = :birth_month')
                ->setParameter('birth_month', $searchData['birth_month']);
        }

        // birth
        if (!empty($searchData['birth_start']) && $searchData['birth_start']) {
            $date = $searchData['birth_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth >= :birth_start')
                ->setParameter('birth_start', $date);
        }
        if (!empty($searchData['birth_end']) && $searchData['birth_end']) {
            $date = clone $searchData['birth_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth < :birth_end')
                ->setParameter('birth_end', $date);
        }

        // tel
        if (isset($searchData['tel']) && Str::isNotBlank($searchData['tel'])) {
            $qb
                ->andWhere('CONCAT(c.tel01, c.tel02, c.tel03) LIKE :tel')
                ->setParameter('tel', '%' . $searchData['tel'] . '%');
        }

        // buy_total
        if (isset($searchData['buy_total_start']) && Str::isNotBlank($searchData['buy_total_start'])) {
            $qb
                ->andWhere('c.buy_total >= :buy_total_start')
                ->setParameter('buy_total_start', $searchData['buy_total_start']);
        }
        if (isset($searchData['buy_total_end']) && Str::isNotBlank($searchData['buy_total_end'])) {
            $qb
                ->andWhere('c.buy_total <= :buy_total_end')
                ->setParameter('buy_total_end', $searchData['buy_total_end']);
        }

        // buy_times
        if (!empty($searchData['buy_times_start']) && $searchData['buy_times_start']) {
            $qb
                ->andWhere('c.buy_times >= :buy_times_start')
                ->setParameter('buy_times_start', $searchData['buy_times_start']);
        }
        if (!empty($searchData['buy_times_end']) && $searchData['buy_times_end']) {
            $qb
                ->andWhere('c.buy_times <= :buy_times_end')
                ->setParameter('buy_times_end', $searchData['buy_times_end']);
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }
        if (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = clone $searchData['update_date_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // last_buy
        if (!empty($searchData['last_buy_start']) && $searchData['last_buy_start']) {
            $date = $searchData['last_buy_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date >= :last_buy_start')
                ->setParameter('last_buy_start', $date);
        }
        if (!empty($searchData['last_buy_end']) && $searchData['last_buy_end']) {
            $date = clone $searchData['last_buy_end'];
            $date = $date
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date < :last_buy_end')
                ->setParameter('last_buy_end', $date);
        }

        // buy_product_name、buy_product_code
        if (isset($searchData['buy_product_code']) && Str::isNotBlank($searchData['buy_product_code'])) {
            $qb
                ->leftJoin('c.Orders', 'o')
                ->leftJoin('o.OrderDetails', 'od')
                ->andWhere('od.product_name LIKE :buy_product_name OR od.product_code LIKE :buy_product_name')
                ->setParameter('buy_product_name', '%' . $searchData['buy_product_code'] . '%');
        }

        // Order By
        $qb->addOrderBy('c.id', 'DESC');

        return $qb;
    }

    public function getQueryBuilderBySearchCustomerIds($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->andWhere('c.del_flg = 0')
            ->andWhere('c.id IN (:customerIds)')
            ->setParameter('customerIds', $searchData);

        // Order By
        $qb->addOrderBy('c.id', 'DESC');

        return $qb;
    }

    public function getQueryBuilderBySearchRegularMemberIds($searchData, $anonymousEnabled = false)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->leftJoin('c.CustomerBasicInfo', 'bc')
            ->andWhere('bc.Status = 1')
            ->andWhere('c.Status = 2')
            ->andWhere('c.del_flg = 0')
            ->andWhere('c.id IN (:customerIds)')
            ->setParameter('customerIds', $searchData);

        if ($anonymousEnabled) {
            $qb->andWhere('bc.Anonymous = 1');
        }

        // Order By
        $qb->addOrderBy('c.id', 'DESC');

        return $qb;
    }

    public function getQueryBuilderBySearchTrainingProductIds($searchData)
    {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->leftJoin('c.Orders', 'o')
                ->leftJoin('o.OrderDetails', 'od')
                ->andWhere('c.Status = 2')
                ->andWhere('c.del_flg = 0')
                ->andWhere('od.Product IN (:productIds)')
                ->setParameter('productIds', $searchData);
        // Order By
        $qb->addOrderBy('c.id', 'ASC');

        return $qb;
    }

    public function getQueryBuilderBySearchGroupId($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->andWhere('c.Status = 2')
            ->andWhere('c.del_flg = 0')
            ->andWhere('c.CustomerGroup = :customerGroupId')
            ->setParameter('customerGroupId', $searchData);

        // Order By
        $qb->addOrderBy('c.id', 'DESC');

        return $qb;
    }

    public function setCustomerGroupBySearchIds($searchData, $CustomerGroupId)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $em->createQueryBuilder()
                ->update('\Eccube\Entity\Customer', 'c')
                ->set("c.CustomerGroup", $CustomerGroupId)
                ->andWhere('c.id IN (:ids)')
                ->setParameter('ids', $searchData)
                ->getQuery()
                ->execute();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            return false;
        }

        return true;

    }

    public function getCustomerByExclusionOrderProduct($searchData, $targetStatus = array())
    {
        $em = $this->getEntityManager();
        $sql = "SELECT * FROM dtb_customer ";
        if (0 < count($targetStatus)) {
            $sql .= "INNER JOIN dtb_customer_basic_info ON dtb_customer.customer_id = dtb_customer_basic_info.customer_id ";
        }
        $sql .= "WHERE (";
        $loop = 0;
        foreach ($searchData as $targetProduct) {
            $sql .= ((0 < $loop)?" OR ":" ") . "dtb_customer.customer_id NOT IN ";
            $sql .= "(SELECT dtb_customer.customer_id FROM dtb_customer INNER JOIN dtb_order ON dtb_customer.customer_id = dtb_order.customer_id ";
            $sql .= "INNER JOIN dtb_order_detail ON dtb_order.order_id = dtb_order_detail.order_id ";
            $sql .= "WHERE dtb_order_detail.product_id = " . $targetProduct;
            $sql .= " GROUP BY dtb_customer.customer_id) ";
            if (0 < count($targetStatus)) {
                $sql .= "AND dtb_customer_basic_info.status in (";
                $cnt = 0;
                foreach($targetStatus as $status) {
                    $sql .= ((0 < $cnt)?",":"") . $status;
                    ++$cnt;
                }
                $sql .= ") ";
            }
            ++$loop;
        }
        $sql .= ") ";
        $sql .= "ORDER BY dtb_customer.customer_id DESC;";
        $customers = $em->getConnection()->fetchAll($sql);

        return $customers;
    }

    /**
     * ユニークなシークレットキーを返す
     * @param $app
     * @return string
     */
    public function getUniqueSecretKey($app)
    {
        $unique = Str::random(32);
        $Customer = $app['eccube.repository.customer']->findBy(array(
            'secret_key' => $unique,
        ));
        if (count($Customer) == 0) {
            return $unique;
        } else {
            return $this->getUniqueSecretKey($app);
        }
    }

    /**
     * ユニークなパスワードリセットキーを返す
     * @param $app
     * @return string
     */
    public function getUniqueResetKey($app)
    {
        $unique = Str::random(32);
        $Customer = $app['eccube.repository.customer']->findBy(array(
                        'reset_key' => $unique,
        ));
        if (count($Customer) == 0) {
            return $unique;
        } else {
            return $this->getUniqueResetKey($app);
        }
    }

    /**
     * saltを生成する
     *
     * @param $byte
     * @return string
     */
    public function createSalt($byte)
    {
        $generator = new SecureRandom();

        return bin2hex($generator->nextBytes($byte));
    }

    /**
     * 入力されたパスワードをSaltと暗号化する
     *
     * @param $app
     * @param  Customer $Customer
     * @return mixed
     */
    public function encryptPasswordFromParam($app, $salt, $pin_code)
    {
        $encoder = $app['security.encoder_factory']->getEncoder(new \Eccube\Entity\Customer());

        return $encoder->encodePassword($pin_code, $salt);
    }

    /**
     * 入力されたパスワードをSaltと暗号化する
     *
     * @param $app
     * @param  Customer $Customer
     * @return mixed
     */
    public function encryptPassword($app, \Eccube\Entity\Customer $Customer)
    {
        $encoder = $app['security.encoder_factory']->getEncoder($Customer);

        return $encoder->encodePassword($Customer->getCustomerBasicInfo()->getCustomerPinCode(), $Customer->getSalt());
    }

    public function getNonActiveCustomerBySecretKey($secret_key)
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.del_flg = 0 AND c.secret_key = :secret_key')
            ->leftJoin('c.Status', 's')
            ->andWhere('s.id = :status')
            ->setParameter('secret_key', $secret_key)
            ->setParameter('status', CustomerStatus::NONACTIVE);
        $query = $qb->getQuery();

        return $query->getSingleResult();
    }

    public function getActiveCustomerByEmail($email)
    {
        $query = $this->createQueryBuilder('c')
            ->where('c.email = :email AND c.Status = :status')
            ->setParameter('email', $email)
            ->setParameter('status', CustomerStatus::ACTIVE)
            ->setMaxResults(1)
            ->getQuery();

        $Customer = $query->getOneOrNullResult();

        return $Customer;
    }

    public function getActiveCustomerByResetKey($reset_key)
    {
        $query = $this->createQueryBuilder('c')
            ->where('c.reset_key = :reset_key AND c.Status = :status AND c.reset_expire >= :reset_expire')
            ->setParameter('reset_key', $reset_key)
            ->setParameter('status', CustomerStatus::ACTIVE)
            ->setParameter('reset_expire', new \DateTime())
            ->getQuery();

        $Customer = $query->getSingleResult();

        return $Customer;
    }

    public function getResetPassword()
    {
        return Str::random(8);
    }

    /**
     * 会員の初回購入時間、購入時間、購入回数、購入金額を更新する
     *
     * @param $app
     * @param  Customer $Customer
     * @param  $orderStatusId
     */
    public function updateBuyData($app, Customer $Customer, $orderStatusId)
    {
        // 会員の場合、初回購入時間・購入時間・購入回数・購入金額を更新

        $arr = array($app['config']['order_new'],
                                $app['config']['order_pay_wait'],
                                $app['config']['order_back_order'],
                                $app['config']['order_deliv'],
                                $app['config']['order_pre_end'],
                        );

        $result = $app['eccube.repository.order']->getCustomerCount($Customer, $arr);

        if (!empty($result)) {
            $data = $result[0];

            $now = new \DateTime();

            $firstBuyDate = $Customer->getFirstBuyDate();
            if (empty($firstBuyDate)) {
                $Customer->setFirstBuyDate($now);
            }

            if ($orderStatusId == $app['config']['order_cancel'] ||
                    $orderStatusId == $app['config']['order_pending'] ||
                    $orderStatusId == $app['config']['order_processing']) {
                // キャンセル、決済処理中、購入処理中は購入時間は更新しない
            } else {
                $Customer->setLastBuyDate($now);
            }

            $Customer->setBuyTimes($data['buy_times']);
            $Customer->setBuyTotal($data['buy_total']);

        } else {
            // 受注データが存在しなければ初期化
            $Customer->setFirstBuyDate(null);
            $Customer->setLastBuyDate(null);
            $Customer->setBuyTimes(0);
            $Customer->setBuyTotal(0);
        }

        $app['orm.em']->persist($Customer);
        $app['orm.em']->flush();
    }
}
